import React, { useEffect, useState } from "react";
import Head from "next/head";
import Link from "next/link";
import styles from "../styles/Home.module.css";
import Header from "../component/Header";
import Footer from "../component/Footer";
import { useRouter } from "next/router";
import axios from "axios";
import Cookies from 'js-cookie';
import ErrorMessage from "../component/ErrorMessage";

export default function Bingo() {
  const [num, setNum] = useState("");
  const [current, setCurrent] = useState("");
  const router = useRouter();
  const [error, setError] = useState(false);
  const [message, setMessage] = useState("");
  const [maxNumber, setmaxNumber] = useState(0);

  useEffect(() => {
    if(Cookies.get('accessToken') == undefined) {
      router.push("/connexion");
    }
    getCurrent();
  }, []);

  const goResult = () => {
    if (num.length === 10) {
      router.push({
        pathname: `resultat`,
        query: { number: num },
      });
    } else console.log("perdu");
  };

  const getCurrent = async () => {
    //fonction pour créer un ticket
    const token = localStorage.getItem("token");
    const config = {
      headers: { Authorization: `Bearer ${token}` },
    };
    const api = process.env.NEXT_PUBLIC_BASE_URL+"/Session/get-current-session";
    try {
      let currenSession = await axios.get(api, config);
      setCurrent(currenSession.data);
      localStorage.setItem("current", currenSession.data);
    } catch (e) {
      setError(true)
    }
  };

  const getNumber = (val) => {
    if(typeof(val) == "number"){
      if(num.length < 10){
        setNum(val)
      }else{
        console.log("max")
      }
    }else{
      console.log("mustbe a number")
    }
  }

  if(Cookies.get("accessToken") !== undefined){
    return (
      <div className={styles.container}>
        <Head>
          <title>TeaBingo - Résultat</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/fav.png" />
        </Head>
        <Header />
        <section className={styles.block}>
          <h1 className={styles.h1}>Bingo ticket</h1>
          <p>Tester votre ticket pour voir votre lot remporté (100% gagnant )</p>
          <form className={styles.bingo}>
            <input
              type="text"
              name="numero"
              autoComplete="off"
              placeholder="Veuillez rentrer vos 10 numéros"
              maxLength={10}
              onChange={(e) => {
                getNumber(e.target.value);
              }}
              value={num}
            />
             <button
                type="button"
                onClick={goResult}
                className={styles.action}
                style={{ margin: 25 }}
              >
                Valider
              </button>
          </form>
        </section>
        <Footer />
      </div>
    );
  }else{
    return (
      <div>
        <p>loading...</p>
      </div>
    )
  }
}
